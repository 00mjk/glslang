struct Types
{
	uint4 u;
	int4 i;
	float4 f;
	double4 d;
};

RWStructuredBuffer<Types> data;

[numthreads(32, 16, 1)]
void CSMain(uint3 dti : SV_DispatchThreadID)
{
	data[dti.x].u = QuadReadLaneAt(data[dti.x].u, 0);
	data[dti.x].u.x = QuadReadLaneAt(data[dti.x].u.x, 0);
	data[dti.x].u.xy = QuadReadLaneAt(data[dti.x].u.xy, 0);
	data[dti.x].u.xyz = QuadReadLaneAt(data[dti.x].u.xyz, 0);

	data[dti.x].i = QuadReadLaneAt(data[dti.x].i, 0);
	data[dti.x].i.x = QuadReadLaneAt(data[dti.x].i.x, 0);
	data[dti.x].i.xy = QuadReadLaneAt(data[dti.x].i.xy, 0);
	data[dti.x].i.xyz = QuadReadLaneAt(data[dti.x].i.xyz, 0);

	data[dti.x].f = QuadReadLaneAt(data[dti.x].f, 0);
	data[dti.x].f.x = QuadReadLaneAt(data[dti.x].f.x, 0);
	data[dti.x].f.xy = QuadReadLaneAt(data[dti.x].f.xy, 0);
	data[dti.x].f.xyz = QuadReadLaneAt(data[dti.x].f.xyz, 0);

	data[dti.x].d = QuadReadLaneAt(data[dti.x].d, 0);
	data[dti.x].d.x = QuadReadLaneAt(data[dti.x].d.x, 0);
	data[dti.x].d.xy = QuadReadLaneAt(data[dti.x].d.xy, 0);
	data[dti.x].d.xyz = QuadReadLaneAt(data[dti.x].d.xyz, 0);

	data[dti.x].u = QuadReadLaneAt(data[dti.x].u, 1);
	data[dti.x].u.x = QuadReadLaneAt(data[dti.x].u.x, 1);
	data[dti.x].u.xy = QuadReadLaneAt(data[dti.x].u.xy, 1);
	data[dti.x].u.xyz = QuadReadLaneAt(data[dti.x].u.xyz, 1);

	data[dti.x].i = QuadReadLaneAt(data[dti.x].i, 1);
	data[dti.x].i.x = QuadReadLaneAt(data[dti.x].i.x, 1);
	data[dti.x].i.xy = QuadReadLaneAt(data[dti.x].i.xy, 1);
	data[dti.x].i.xyz = QuadReadLaneAt(data[dti.x].i.xyz, 1);

	data[dti.x].f = QuadReadLaneAt(data[dti.x].f, 1);
	data[dti.x].f.x = QuadReadLaneAt(data[dti.x].f.x, 1);
	data[dti.x].f.xy = QuadReadLaneAt(data[dti.x].f.xy, 1);
	data[dti.x].f.xyz = QuadReadLaneAt(data[dti.x].f.xyz, 1);

	data[dti.x].d = QuadReadLaneAt(data[dti.x].d, 1);
	data[dti.x].d.x = QuadReadLaneAt(data[dti.x].d.x, 1);
	data[dti.x].d.xy = QuadReadLaneAt(data[dti.x].d.xy, 1);
	data[dti.x].d.xyz = QuadReadLaneAt(data[dti.x].d.xyz, 1);

	data[dti.x].u = QuadReadLaneAt(data[dti.x].u, 2);
	data[dti.x].u.x = QuadReadLaneAt(data[dti.x].u.x, 2);
	data[dti.x].u.xy = QuadReadLaneAt(data[dti.x].u.xy, 2);
	data[dti.x].u.xyz = QuadReadLaneAt(data[dti.x].u.xyz, 2);

	data[dti.x].i = QuadReadLaneAt(data[dti.x].i, 2);
	data[dti.x].i.x = QuadReadLaneAt(data[dti.x].i.x, 2);
	data[dti.x].i.xy = QuadReadLaneAt(data[dti.x].i.xy, 2);
	data[dti.x].i.xyz = QuadReadLaneAt(data[dti.x].i.xyz, 2);

	data[dti.x].f = QuadReadLaneAt(data[dti.x].f, 2);
	data[dti.x].f.x = QuadReadLaneAt(data[dti.x].f.x, 2);
	data[dti.x].f.xy = QuadReadLaneAt(data[dti.x].f.xy, 2);
	data[dti.x].f.xyz = QuadReadLaneAt(data[dti.x].f.xyz, 2);

	data[dti.x].d = QuadReadLaneAt(data[dti.x].d, 2);
	data[dti.x].d.x = QuadReadLaneAt(data[dti.x].d.x, 2);
	data[dti.x].d.xy = QuadReadLaneAt(data[dti.x].d.xy, 2);
	data[dti.x].d.xyz = QuadReadLaneAt(data[dti.x].d.xyz, 2);

	data[dti.x].u = QuadReadLaneAt(data[dti.x].u, 3);
	data[dti.x].u.x = QuadReadLaneAt(data[dti.x].u.x, 3);
	data[dti.x].u.xy = QuadReadLaneAt(data[dti.x].u.xy, 3);
	data[dti.x].u.xyz = QuadReadLaneAt(data[dti.x].u.xyz, 3);

	data[dti.x].i = QuadReadLaneAt(data[dti.x].i, 3);
	data[dti.x].i.x = QuadReadLaneAt(data[dti.x].i.x, 3);
	data[dti.x].i.xy = QuadReadLaneAt(data[dti.x].i.xy, 3);
	data[dti.x].i.xyz = QuadReadLaneAt(data[dti.x].i.xyz, 3);

	data[dti.x].f = QuadReadLaneAt(data[dti.x].f, 3);
	data[dti.x].f.x = QuadReadLaneAt(data[dti.x].f.x, 3);
	data[dti.x].f.xy = QuadReadLaneAt(data[dti.x].f.xy, 3);
	data[dti.x].f.xyz = QuadReadLaneAt(data[dti.x].f.xyz, 3);

	data[dti.x].d = QuadReadLaneAt(data[dti.x].d, 3);
	data[dti.x].d.x = QuadReadLaneAt(data[dti.x].d.x, 3);
	data[dti.x].d.xy = QuadReadLaneAt(data[dti.x].d.xy, 3);
	data[dti.x].d.xyz = QuadReadLaneAt(data[dti.x].d.xyz, 3);

	data[dti.x].u = QuadSwapX(data[dti.x].u);
	data[dti.x].u.x = QuadSwapX(data[dti.x].u.x);
	data[dti.x].u.xy = QuadSwapX(data[dti.x].u.xy);
	data[dti.x].u.xyz = QuadSwapX(data[dti.x].u.xyz);

	data[dti.x].i = QuadSwapX(data[dti.x].i);
	data[dti.x].i.x = QuadSwapX(data[dti.x].i.x);
	data[dti.x].i.xy = QuadSwapX(data[dti.x].i.xy);
	data[dti.x].i.xyz = QuadSwapX(data[dti.x].i.xyz);

	data[dti.x].f = QuadSwapX(data[dti.x].f);
	data[dti.x].f.x = QuadSwapX(data[dti.x].f.x);
	data[dti.x].f.xy = QuadSwapX(data[dti.x].f.xy);
	data[dti.x].f.xyz = QuadSwapX(data[dti.x].f.xyz);

	data[dti.x].d = QuadSwapX(data[dti.x].d);
	data[dti.x].d.x = QuadSwapX(data[dti.x].d.x);
	data[dti.x].d.xy = QuadSwapX(data[dti.x].d.xy);
	data[dti.x].d.xyz = QuadSwapX(data[dti.x].d.xyz);

	data[dti.x].u = QuadSwapY(data[dti.x].u);
	data[dti.x].u.x = QuadSwapY(data[dti.x].u.x);
	data[dti.x].u.xy = QuadSwapY(data[dti.x].u.xy);
	data[dti.x].u.xyz = QuadSwapY(data[dti.x].u.xyz);

	data[dti.x].i = QuadSwapY(data[dti.x].i);
	data[dti.x].i.x = QuadSwapY(data[dti.x].i.x);
	data[dti.x].i.xy = QuadSwapY(data[dti.x].i.xy);
	data[dti.x].i.xyz = QuadSwapY(data[dti.x].i.xyz);

	data[dti.x].f = QuadSwapY(data[dti.x].f);
	data[dti.x].f.x = QuadSwapY(data[dti.x].f.x);
	data[dti.x].f.xy = QuadSwapY(data[dti.x].f.xy);
	data[dti.x].f.xyz = QuadSwapY(data[dti.x].f.xyz);

	data[dti.x].d = QuadSwapY(data[dti.x].d);
	data[dti.x].d.x = QuadSwapY(data[dti.x].d.x);
	data[dti.x].d.xy = QuadSwapY(data[dti.x].d.xy);
	data[dti.x].d.xyz = QuadSwapY(data[dti.x].d.xyz);
}
